15/03/2019 01:32:34 Using debug logging
15/03/2019 01:32:34 Input parameters max_nesting: 10, min_match_length: 3
15/03/2019 01:32:34 Read from MSA file sample_example/nested.fa
15/03/2019 01:32:34 consensus: AAAAAAAAAAAAAAA***********************CGTGCGTGCGTGCGTGCGTGCGTG
15/03/2019 01:32:34 have match string AAAAAAAAAAAAAAA
15/03/2019 01:32:34 add match interval to complete step [0,14]
15/03/2019 01:32:34 at end have match string CGTGCGTGCGTGCGTGCGTGCGTG
15/03/2019 01:32:34 add non-match interval at end as have alts [15,37]
15/03/2019 01:32:34 add match interval at end [38,61]
15/03/2019 01:32:34 Non match intervals: [[15, 37]]
15/03/2019 01:32:34 Divide sequences into subgroups and define prg for each subgroup.
15/03/2019 01:32:34 Get kmeans partition of interval [15, 37]
15/03/2019 01:32:34 Add classes corresponding to 1 small sequences
15/03/2019 01:32:34 Now add classes corresponding to 3 longer sequences
15/03/2019 01:32:34 First transform sequences into kmer occurance vectors
15/03/2019 01:32:34 self.kmer_dict = {'TTT': 0, 'TTA': 1, 'TAT': 2, 'ATT': 3, 'TTC': 4, 'TCT': 5, 'CTT': 6, 'TTG': 7, 'TGT': 8, 'GTT': 9}
15/03/2019 01:32:34 These vectors have length 10
15/03/2019 01:32:34 seq_kmer_counts = [[6. 2. 2. 2. 2. 2. 2. 1. 1. 1.]
 [6. 1. 1. 1. 3. 3. 3. 1. 1. 1.]
 [6. 2. 2. 2. 0. 0. 0. 3. 3. 3.]]
15/03/2019 01:32:34 Now cluster:
15/03/2019 01:32:34 number of clusters: 1, inertia: 24.000000
15/03/2019 01:32:34 Extract equivalence classes from this partition
15/03/2019 01:32:34 Merge return id lists for the partitions
15/03/2019 01:32:34 add (small) return ids: ['1']
15/03/2019 01:32:34 want to add (big) return ids: ['2']
15/03/2019 01:32:34 add (big) return ids 0: ['2', '3', '4']
15/03/2019 01:32:34 Clustering:
15/03/2019 01:32:34 Input alignments: SingleLetterAlphabet() alignment with 4 rows and 23 columns
----------------------- 1
TTTATTTCTTTGTTTATTTCTTT 2
TTTCTTTATTTCTTTCTTTGTTT 3
TTTGTTTGTTTATTTGTTTATTT 4
15/03/2019 01:32:34 Output clusters: [['1'], ['2', '3', '4']]
15/03/2019 01:32:34 subAlignedSeqs now has keys: [15]
15/03/2019 01:32:34 consensus: -----------------------
15/03/2019 01:32:34 add short match whole interval [0,22]
15/03/2019 01:32:34 Non match intervals: []
15/03/2019 01:32:34 consensus: TTT*TTT*TTT*TTT*TTT*TTT
15/03/2019 01:32:34 have match string TTT
15/03/2019 01:32:34 add match interval to complete step [0,2]
15/03/2019 01:32:34 have match string TTT
15/03/2019 01:32:34 add non-match interval as have alts [3,3]
15/03/2019 01:32:34 add match interval to complete step [4,6]
15/03/2019 01:32:34 have match string TTT
15/03/2019 01:32:34 add non-match interval as have alts [7,7]
15/03/2019 01:32:34 add match interval to complete step [8,10]
15/03/2019 01:32:34 have match string TTT
15/03/2019 01:32:34 add non-match interval as have alts [11,11]
15/03/2019 01:32:34 add match interval to complete step [12,14]
15/03/2019 01:32:34 have match string TTT
15/03/2019 01:32:34 add non-match interval as have alts [15,15]
15/03/2019 01:32:34 add match interval to complete step [16,18]
15/03/2019 01:32:34 at end have match string TTT
15/03/2019 01:32:34 add non-match interval at end as have alts [19,19]
15/03/2019 01:32:34 add match interval at end [20,22]
15/03/2019 01:32:34 Non match intervals: [[3, 3], [7, 7], [11, 11], [15, 15], [19, 19]]
15/03/2019 01:32:34 Have reached max nesting level or have a small variant site, so add all variant sequences in interval.
15/03/2019 01:32:34 Variant seqs found: ['A', 'C', 'G']
15/03/2019 01:32:34 Which is equivalent to: ['A', 'C', 'G']
15/03/2019 01:32:34 Have reached max nesting level or have a small variant site, so add all variant sequences in interval.
15/03/2019 01:32:34 Variant seqs found: ['C', 'A', 'G']
15/03/2019 01:32:34 Which is equivalent to: ['A', 'C', 'G']
15/03/2019 01:32:34 Have reached max nesting level or have a small variant site, so add all variant sequences in interval.
15/03/2019 01:32:34 Variant seqs found: ['G', 'C', 'A']
15/03/2019 01:32:34 Which is equivalent to: ['A', 'C', 'G']
15/03/2019 01:32:34 Have reached max nesting level or have a small variant site, so add all variant sequences in interval.
15/03/2019 01:32:34 Variant seqs found: ['A', 'C', 'G']
15/03/2019 01:32:34 Which is equivalent to: ['A', 'C', 'G']
15/03/2019 01:32:34 Have reached max nesting level or have a small variant site, so add all variant sequences in interval.
15/03/2019 01:32:34 Variant seqs found: ['C', 'G', 'A']
15/03/2019 01:32:34 Which is equivalent to: ['A', 'C', 'G']
15/03/2019 01:32:34 Write PRG file to sample_example/nested.fa.max_nest10.min_match3.prg
15/03/2019 01:32:34 self.subAlignedSeqs.keys(): [15]
15/03/2019 01:32:34 self.subAlignedSeqs[self.subAlignedSeqs.keys()[0]]: [<__main__.AlignedSeq object at 0x116f60978>, <__main__.AlignedSeq object at 0x116f60860>]
15/03/2019 01:32:34 interval start: 15
15/03/2019 01:32:34 type of subAlignedSeqs object in list: <class '__main__.AlignedSeq'>
15/03/2019 01:32:34 self.subAlignedSeqs == {} at nesting level 2 for interval [15, 37]
15/03/2019 01:32:34 found the max of [2] is 2
15/03/2019 01:32:34 recur max level nesting returned: 2, which has type <class 'int'>
15/03/2019 01:32:34 type of subAlignedSeqs object in list: <class '__main__.AlignedSeq'>
15/03/2019 01:32:34 self.subAlignedSeqs == {} at nesting level 2 for interval [15, 37]
15/03/2019 01:32:34 found the max of [2] is 2
15/03/2019 01:32:34 recur max level nesting returned: 2, which has type <class 'int'>
15/03/2019 01:32:34 found the max of [2, 2] is 2
15/03/2019 01:32:34 Max_nesting_reached	2
15/03/2019 01:32:34 Write GFA file to sample_example/nested.fa.max_nest10.min_match3.gfa
15/03/2019 01:32:34 gfa_site: 5
15/03/2019 01:32:34 prgs: ['AAAAAAAAAAAAAAA', ' 6 TTT 7 A 8 C 8 G 7 TTT 9 A 10 C 10 G 9 TTT 11 A 12 C 12 G 11 TTT 13 A 14 C 14 G 13 TTT 15 A 16 C 16 G 15 TTT', 'CGTGCGTGCGTGCGTGCGTGCGTG']
15/03/2019 01:32:34 vars: ['', 'TTT 7 A 8 C 8 G 7 TTT 9 A 10 C 10 G 9 TTT 11 A 12 C 12 G 11 TTT 13 A 14 C 14 G 13 TTT 15 A 16 C 16 G 15 TTT']
15/03/2019 01:32:34 gfa_site: 7
15/03/2019 01:32:34 gfa_site: 7
15/03/2019 01:32:34 prgs: ['TTT', 'A 8 C 8 G', 'TTT 9 A 10 C 10 G 9 TTT 11 A 12 C 12 G 11 TTT 13 A 14 C 14 G 13 TTT 15 A 16 C 16 G 15 TTT']
15/03/2019 01:32:34 vars: ['A', 'C', 'G']
15/03/2019 01:32:34 gfa_site: 9
15/03/2019 01:32:34 gfa_site: 9
15/03/2019 01:32:34 prgs: ['TTT', 'A 10 C 10 G', 'TTT 11 A 12 C 12 G 11 TTT 13 A 14 C 14 G 13 TTT 15 A 16 C 16 G 15 TTT']
15/03/2019 01:32:34 vars: ['A', 'C', 'G']
15/03/2019 01:32:34 gfa_site: 11
15/03/2019 01:32:34 gfa_site: 11
15/03/2019 01:32:34 prgs: ['TTT', 'A 12 C 12 G', 'TTT 13 A 14 C 14 G 13 TTT 15 A 16 C 16 G 15 TTT']
15/03/2019 01:32:34 vars: ['A', 'C', 'G']
15/03/2019 01:32:34 gfa_site: 13
15/03/2019 01:32:34 gfa_site: 13
15/03/2019 01:32:34 prgs: ['TTT', 'A 14 C 14 G', 'TTT 15 A 16 C 16 G 15 TTT']
15/03/2019 01:32:34 vars: ['A', 'C', 'G']
15/03/2019 01:32:34 gfa_site: 15
15/03/2019 01:32:34 gfa_site: 15
15/03/2019 01:32:34 prgs: ['TTT', 'A 16 C 16 G', 'TTT']
15/03/2019 01:32:34 vars: ['A', 'C', 'G']
15/03/2019 01:32:34 gfa_site: 17
15/03/2019 01:32:34 self.subAlignedSeqs.keys(): [15]
15/03/2019 01:32:34 self.subAlignedSeqs[self.subAlignedSeqs.keys()[0]]: [<__main__.AlignedSeq object at 0x116f60978>, <__main__.AlignedSeq object at 0x116f60860>]
15/03/2019 01:32:34 interval start: 15
15/03/2019 01:32:34 type of subAlignedSeqs object in list: <class '__main__.AlignedSeq'>
15/03/2019 01:32:34 self.subAlignedSeqs == {} at nesting level 2 for interval [15, 37]
15/03/2019 01:32:34 found the max of [2] is 2
15/03/2019 01:32:34 recur max level nesting returned: 2, which has type <class 'int'>
15/03/2019 01:32:34 type of subAlignedSeqs object in list: <class '__main__.AlignedSeq'>
15/03/2019 01:32:34 self.subAlignedSeqs == {} at nesting level 2 for interval [15, 37]
15/03/2019 01:32:34 found the max of [2] is 2
15/03/2019 01:32:34 recur max level nesting returned: 2, which has type <class 'int'>
15/03/2019 01:32:34 found the max of [2, 2] is 2
